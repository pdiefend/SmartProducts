
#include "c_types.h"
#include "ip_addr.h"
#include "ets_sys.h"
#include "espconn.h"
#include "osapi.h"
#include "mem.h"
#include "gpio.h"
#include "os_type.h"
#include "user_config.h"
#include "user_interface.h"
#include "driver/uart.h"


#define user_procTaskPrio        0
#define user_procTaskQueueLen    1

#define LOCATIONID "5201470" // location id
#define DST_IP "188.226.224.148" //api.openweathermap.org

// RTOS Process Queue
os_event_t    user_procTaskQueue[user_procTaskQueueLen];
LOCAL os_timer_t network_timer;

// Idle Task 
static void user_procTask(os_event_t *events);

static esp_tcp global_tcp;                              // TCP connect var (see espconn.h)
static struct espconn global_tcp_connect;               // Connection struct (see espconn.h)
static uint8_t tcp_conn_ok = FALSE;                     // Bool to know if tcp connection set

//Main code function
static void ICACHE_FLASH_ATTR user_procTask(os_event_t *events) {
    os_printf("Hello\n\r");
    os_delay_us(10000);
    system_os_post(user_procTaskPrio, 0, 0 );
}

//Init function 
void ICACHE_FLASH_ATTR user_init() {
    char ssid[32] = SSID;
    char password[64] = SSID_PASSWORD;
    struct station_config stationConf;

    //Set station mode
    wifi_set_opmode( 0x1 );

    //Set ap settings
    os_memcpy(&stationConf.ssid, ssid, 32);
    os_memcpy(&stationConf.password, password, 64);
    wifi_station_set_config(&stationConf);

    //Start os task
    system_os_task(loop, user_procTaskPrio,user_procTaskQueue, user_procTaskQueueLen);

    system_os_post(user_procTaskPrio, 0, 0 );
}

/* tcp Data received callback. Apparently we're doing nothing with the data. */    
static void ICACHE_FLASH_ATTR tcpNetworkRecvCb(void *arg, char *data, unsigned short len) 
{
    struct espconn *tcpconn=(struct espconn *)arg;
}

/* Start network connections */
void ICACHE_FLASH_ATTR network_start(void) 
{   
    init_tcp_conn();            // Init tcp connection
}

/* Check to see if we were issued an IP number. See comments in Server program */
void ICACHE_FLASH_ATTR network_check_ip(void)
{
    struct ip_info ipconfig;

    os_timer_disarm(&network_timer);                // Disarm timer
    wifi_get_ip_info(STATION_IF, &ipconfig);        // Get Wifi info

    if (wifi_station_get_connect_status() == STATION_GOT_IP && ipconfig.ip.addr != 0) 
    {
        network_start();                            // Everything in order
    }
    else 
    {
        os_printf("Waiting for IP...\n\r");
        os_timer_setfn(&network_timer, (os_timer_func_t *)network_check_ip, NULL);
        os_timer_arm(&network_timer, 1000, 0);
    }         
}

// network init function
void ICACHE_FLASH_ATTR network_init() {       
    os_timer_disarm(&network_timer);
    os_timer_setfn(&network_timer, (os_timer_func_t *)network_check_ip, NULL);
    os_timer_arm(&network_timer, 1000, 0);
}

/* TCP Successfully connected Call back */
static void ICACHE_FLASH_ATTR tcpNetworkConnectedCb(void *arg) 
{    
    /* create a connection struct with passed connection data including successfully
    created connection data */
    struct espconn *tcpconn=(struct espconn *)arg;
    /* register a call back function for when data is received */
    espconn_regist_recvcb(tcpconn, tcpNetworkRecvCb);
    
    os_printf("TCP connected\n\r"); 
    uint8_t data[20] = "Hello you!\r\n";
    /* Again, wayyyy easier than the UART methodology */
    espconn_sent(tcpconn, data, 20);
    tcp_conn_ok = TRUE;
}

/* TCP Reconnected Callback. Called when the connection was reestablished 
When this is called is unclear.*/
static void ICACHE_FLASH_ATTR tcpNetworkReconCb(void *arg, sint8 err) 
{
    os_printf("TCP reconnect\n\r");
    tcp_conn_ok = FALSE;
    /* Reset the network connections */
    network_init();
}

/* TODO what the F is this and the previous function doing */
static void ICACHE_FLASH_ATTR tcpNetworkDisconCb(void *arg) 
{
    os_printf("TCP disconnect\n\r");
    tcp_conn_ok = FALSE;
    network_init();
}


/* Initialize the TCP connection */
static void ICACHE_FLASH_ATTR init_tcp_conn(void) 
{
    global_tcp_connect.type=ESPCONN_TCP;                     // We want to make a TCP connection
    global_tcp_connect.state=ESPCONN_NONE;                   // Set default state to none
    global_tcp_connect.proto.tcp=&global_tcp;                // Give a pointer to our TCP var
    global_tcp_connect.proto.tcp->local_port=espconn_port(); // Ask a free local port to the API
    global_tcp_connect.proto.tcp->remote_port=80;          // Set remote port
    global_tcp_connect.proto.tcp->remote_ip[0]=DST_IP;      // Open Weathermap IP

    espconn_regist_connectcb(&global_tcp_connect, tcpNetworkConnectedCb);   // Register connect callback
    espconn_regist_disconcb(&global_tcp_connect, tcpNetworkDisconCb);       // Register disconnect callback
    espconn_regist_reconcb(&global_tcp_connect, tcpNetworkReconCb);         // Register reconnection function
    espconn_connect(&global_tcp_connect);                                   // Start connection
}

/* 
First connect to the WiFi network
Set to single connection mode
Start TCP connection to DST_IP port 80
Send the following data:
    cmd = "GET /data/2.5/weather?id=";
    cmd += LOCATIONID;
    cmd += " HTTP/1.0\r\nHost: api.openweathermap.org\r\n\r\n";
    maybe make that at static string of known length
JSON will get returned, maybe just dump the data to the terminal until I know what to look for
    look for "\"main\":{" also according to previous program then stop at }
set this up on a timer for once every so many seconds
*/

